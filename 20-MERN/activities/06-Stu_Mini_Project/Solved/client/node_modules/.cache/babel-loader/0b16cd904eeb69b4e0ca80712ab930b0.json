{"ast":null,"code":"import _slicedToArray from \"/Users/braddavis/Desktop/my-class-repo/20-MERN/activities/06-Stu_Mini_Project/Solved/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/braddavis/Desktop/my-class-repo/20-MERN/activities/06-Stu_Mini_Project/Solved/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"/Users/braddavis/Desktop/my-class-repo/20-MERN/activities/06-Stu_Mini_Project/Solved/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/braddavis/Desktop/my-class-repo/20-MERN/activities/06-Stu_Mini_Project/Solved/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/braddavis/Desktop/my-class-repo/20-MERN/activities/06-Stu_Mini_Project/Solved/client/src/utils/GlobalState.js\";\n\nimport React, { createContext, useReducer, useContext } from \"react\";\nimport { SET_CURRENT_POST, REMOVE_POST, UPDATE_POSTS, ADD_POST, ADD_FAVORITE, UPDATE_FAVORITES, REMOVE_FAVORITE, LOADING } from \"./actions\";\nvar StoreContext = createContext();\nvar Provider = StoreContext.Provider; // reducer is switch statement dependant on the case\n// ie. for Set Post, it will return all previous elements of state\n// then overwrite with the action (which is a post)\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case SET_CURRENT_POST:\n      return _objectSpread({}, state, {\n        currentPost: action.post,\n        loading: false\n      });\n    // update post will return all previous elements, overwrite a post \n    // with updated content  \n\n    case UPDATE_POSTS:\n      return _objectSpread({}, state, {\n        posts: _toConsumableArray(action.posts),\n        loading: false\n      });\n    // add post will take state, overwrite existing state to add the actiom (a post\n    // and add the post to state\n\n    case ADD_POST:\n      return _objectSpread({}, state, {\n        posts: [action.post].concat(_toConsumableArray(state.posts)),\n        loading: false\n      });\n    // take state, overwrite state, filtering on the selected post, and remove that\n    // designated post from the list\n\n    case REMOVE_POST:\n      return _objectSpread({}, state, {\n        posts: state.posts.filter(function (post) {\n          return post._id !== action._id;\n        })\n      });\n\n    case ADD_FAVORITE:\n      return _objectSpread({}, state, {\n        favorites: [action.post].concat(_toConsumableArray(state.favorites)),\n        loading: false\n      });\n\n    case UPDATE_FAVORITES:\n      return _objectSpread({}, state, {\n        favorites: _toConsumableArray(state.favorites),\n        loading: false\n      });\n\n    case REMOVE_FAVORITE:\n      return _objectSpread({}, state, {\n        favorites: state.favorites.filter(function (post) {\n          return post._id !== action._id;\n        })\n      });\n\n    case LOADING:\n      return _objectSpread({}, state, {\n        // what does this mean? \n        // test later\n        loading: true\n      });\n\n    default:\n      return state;\n  }\n}; // \n\n\nvar StoreProvider = function StoreProvider(_ref) {\n  var _ref$value = _ref.value,\n      value = _ref$value === void 0 ? [] : _ref$value,\n      props = _objectWithoutProperties(_ref, [\"value\"]);\n\n  // dispatch is a method that sends the result of an action\n  // takes current status of page, and hook\n  // const basicHook [update, updateUpdate]\n  var _useReducer = useReducer(reducer, {\n    posts: [],\n    currentPost: {\n      _id: 0,\n      title: \"\",\n      body: \"\",\n      author: \"\"\n    },\n    favorites: [],\n    loading: false\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  return /*#__PURE__*/React.createElement(Provider, Object.assign({\n    value: [state, dispatch]\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 10\n    }\n  }));\n};\n\nvar useStoreContext = function useStoreContext() {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };","map":{"version":3,"sources":["/Users/braddavis/Desktop/my-class-repo/20-MERN/activities/06-Stu_Mini_Project/Solved/client/src/utils/GlobalState.js"],"names":["React","createContext","useReducer","useContext","SET_CURRENT_POST","REMOVE_POST","UPDATE_POSTS","ADD_POST","ADD_FAVORITE","UPDATE_FAVORITES","REMOVE_FAVORITE","LOADING","StoreContext","Provider","reducer","state","action","type","currentPost","post","loading","posts","filter","_id","favorites","StoreProvider","value","props","title","body","author","dispatch","useStoreContext"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer, useContext } from \"react\";\nimport {\n  SET_CURRENT_POST,\n  REMOVE_POST,\n  UPDATE_POSTS,\n  ADD_POST,\n  ADD_FAVORITE,\n  UPDATE_FAVORITES,\n  REMOVE_FAVORITE,\n  LOADING\n} from \"./actions\";\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n// reducer is switch statement dependant on the case\n// ie. for Set Post, it will return all previous elements of state\n// then overwrite with the action (which is a post)\nconst reducer = (state, action) => {\n  switch (action.type) {\n  case SET_CURRENT_POST:\n    return {\n      ...state,\n      currentPost: action.post,\n      loading: false\n    };\n\n  // update post will return all previous elements, overwrite a post \n  // with updated content  \n  case UPDATE_POSTS:\n    return {\n      ...state,\n      posts: [...action.posts],\n      loading: false\n    };\n// add post will take state, overwrite existing state to add the actiom (a post\n// and add the post to state\n  case ADD_POST:\n    return {\n      ...state,\n      posts: [action.post, ...state.posts],\n      loading: false\n    };\n// take state, overwrite state, filtering on the selected post, and remove that\n// designated post from the list\n  case REMOVE_POST:\n    return {\n      ...state, \n      posts: state.posts.filter((post) => {\n        return post._id !== action._id; \n      })\n    };\n\n  case ADD_FAVORITE:\n    return {\n      ...state,\n      favorites: [action.post, ...state.favorites],\n      loading: false\n    };\n\n  case UPDATE_FAVORITES:\n    return {\n      ...state,\n      favorites: [...state.favorites],\n      loading: false\n    };\n\n  case REMOVE_FAVORITE:\n    return {\n      ...state,\n      favorites: state.favorites.filter((post) => {\n        return post._id !== action._id; \n      })\n    };\n\n  case LOADING:\n    return {\n      ...state,\n      // what does this mean? \n      // test later\n      loading: true\n    };\n\n  default:\n    return state;\n  }\n};\n\n// \nconst StoreProvider = ({ value = [], ...props }) => {\n  // dispatch is a method that sends the result of an action\n  // takes current status of page, and hook\n\n  // const basicHook [update, updateUpdate]\n  const [state, dispatch] = useReducer(reducer, {\n    posts: [],\n    currentPost: {\n      _id: 0,\n      title: \"\",\n      body: \"\",\n      author: \"\"\n    },\n    favorites: [],\n    loading: false\n  });\n\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };\n"]},"metadata":{},"sourceType":"module"}